install.packages("roxygen2")
library(ultimateexchanger)
library(ultimateexchanger)
library(ultimateexchanger)
usd_rate <- function(value, incurrency, outcurrency) {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate <- function(value, incurrency, outcurrency == 'USD') {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate <- function(value, incurrency, outcurrency) {
list = ('USD' = outcurrency)
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate(1000, 'HUF')
usd_rate <- function(value, incurrency, outcurrency = 'USD') {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate(1000, 'HUF')
library(httr)
library(jsonlite)
library(logger)
usd_rate(1000, 'HUF')
usd_rate(1000, 'HUF', 'EUR')
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value, 'EUR', 'USD')
print(as.numeric(euro))
}
convert_usd_to_eur(10)
convert_usd_to_eur(10)
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value, 'EUR')
}
convert_usd_to_eur(10)
usd_rate <- function(value, incurrency, outcurrency = 'USD') {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate <- function(value, incurrency = 'EUR', outcurrency = 'USD') {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
usd_rate(1000)
usd_rate(1000, 'HUF', 'DKK')
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value)
}
convert_usd_to_eur(10)
convert_usd_to_eur(er)
convert_usd_to_eur(10)
a <- convert_usd_to_eur(10)
str(a)
a <- convert_usd_to_eur(10)
str(a)
a <- convert_usd_to_eur(10, 'DKK', 'HUF')
eur <- function(value){
eur(10)
eur <- function(value){
eur <- function(value){
rounded <- round(value, 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
return(paste0('€', rounded))
}
eur(10)
eur <- function(value){
rounded <- round(value, 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
eur(10)
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value)
}
a <- convert_usd_to_eur(10)
str(a)
library(ultimateexchanger)
usd_rate <- function(value, incurrency = 'EUR', outcurrency = 'USD') {
alap <- GET(paste0('https://api.exchangeratesapi.io/latest?base=', incurrency, '&symbols=', outcurrency))
alap <- content(alap)
alap <- alap[[1]][1]
alap <- as.numeric(unlist(alap))
endvalue <- value * alap
log_info('{value} {incurrency} is equal to {endvalue} {outcurrency}')
print(as.numeric(endvalue))
}
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value)
}
eur <- function(value){
rounded <- round(value, 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
eur(10)
eur(100000)
eur(10000)
eur(1000000)
eur(1000)
eur(1000000000)
eur <- function(value){
options(scipen = 999)
rounded <- round(value, 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
eur(1000000000)
eur(1000000000,24556757)
eur(1000000000.24556757)
uneur <- function(value) {
a <- str_extract(value, regex('[0-9]'))
print(as.numeric(a))
}
library(stringr)
uneur(eur(1000000.01123345))
uneur <- function(value) {
a <- str_extract(value, regex('^[0-9]*$'))
print(as.numeric(a))
}
uneur(eur(1000000.214254))
a <- str_extract(value, regex('[0-9]*$'))
uneur <- function(value) {
a <- str_extract(value, regex('[0-9]*$'))
print(as.numeric(a))
}
uneur(eur(1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
print(as.numeric(a))
}
uneur(eur(1000000.214254))
uneur(eur(-1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
return(as.numeric(a))
}
uneur(eur(-1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
return(as.integer(a))
}
uneur(eur(-1000000.214254))
eur <- function(value){
options(scipen = 999)
rounded <- round(value, 3)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
eur(1000000000.24556757)
?round
eur <- function(value){
options(scipen = 999)
rounded <- round(value, digits = 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
eur(1000000000.24556757)
str(eur(1000000000.24556757))
eur(-1000000000.24556757)
eur(100.00003456578)
convert_usd_to_eur <- function(value) {
euro <- usd_rate(value = value)
}
install.packages("devtools")
round(100000000000000.123456567, digits = 2)
round(123.456, digits = 2)
round(123.4564634566475, digits = 2)
round(123543466567445763745637843.4564634566475, digits = 2)
round(123543466567445763745637843.4564634566475, digits = 2)
round(1000000.4564634566475, digits = 2)
round(1000000.4564634566475, 2)
round(10.4564634566475, 2)
round(100.4564634566475, 2)
round(1000.4564634566475, 2)
round(10000.4564634566475, 2)
round(100000.4564634566475, 2)
round(1000000.4564634566475, 2)
eur <- function(value){
rounded <- round(value, digits = 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
round(1000000.4564634566475, 2)
?options
eur <- function(value){
#options(scipen = 999)
rounded <- round(value, digits = 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
round(1000000.4564634566475, 2)
options()
install.packages("settings")
library(settings)
reset(options)
eur <- function(value){
#options(scipen = 999)
rounded <- round(value, digits = 2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
round(1000000.4564634566475, 2)
reset(options)
?formatC
eur <- function(value){
rounded <- formatC(value, format="f", digits=2)
rounded <- format(rounded, nsmall=1, big.mark=",")
print(paste0('€', rounded))
}
round(1000000.4564634566475, 2)
eur(10000000000.12345)
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
return(as.integer(a))
}
uneur(eur(-1000000.214254))
n
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
print(as.numeric(a))
}
uneur(eur(-1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
print(a)
}
uneur(eur(-1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
a <- as.numeric(a)
print(a)
}
uneur(eur(-1000000.214254))
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
a <- formatC(a, format="f", digits=2)
print(a)
}
uneur(eur(-1000000.214254))
library(ultimateexchanger)
library(devtools)
use_testthat()
library(ultimateexchanger)
usd_rate(100)
library(ultimateexchanger)
usd_rate(100)
uneur(-€42)
uneur('-€42')
uneur <- function(value) {
a <- gsub('€', '', value)
a <- gsub(',', '', a)
a <- formatC(a, format="f", digits=2)
print(as.numeric(a))
}
uneur('-€42')
library(ultimateexchanger)
test_that(
"testing uneur from ultimateexchanger",
{
expect_equal(uneur('€4'), 4)
expect_equal(uneur('-€2'), -2)
expect_equal(uneur('€0.00'), 0.00)
expect_equal(uneur('-€42'), -42)
expect_equal(uneur('€3,423.42'), 3,423.42)
}
)
library(testthat)
library(ultimateexchanger)
test_that(
"testing uneur from ultimateexchanger",
{
expect_equal(uneur('€4'), 4)
expect_equal(uneur('-€2'), -2)
expect_equal(uneur('€0.00'), 0.00)
expect_equal(uneur('-€42'), -42)
expect_equal(uneur('€3,423.42'), 3,423.42)
}
)
test_that(
"testing uneur from ultimateexchanger",
{
expect_equal(uneur('€4'), 4)
expect_equal(uneur('-€2'), -2)
expect_equal(uneur('€0.00'), 0.00)
expect_equal(uneur('-€42'), -42)
expect_equal(uneur('€3,423.42'), 3,423.42)
}
)
test_check("ultimateexchanger")
test_that(
"testing uneur from ultimateexchanger",
{
expect_equal(uneur('€4'), '4')
expect_equal(uneur('-€2'), -2)
expect_equal(uneur('€0.00'), 0.00)
expect_equal(uneur('-€42'), -42)
expect_equal(uneur('€3,423.42'), 3,423.42)
}
)
test_that(
"testing uneur from ultimateexchanger",
{
expect_equal(uneur('€4'), 4)
expect_equal(uneur('-€2'), -2)
expect_equal(uneur('€0.00'), 0.00)
expect_equal(uneur('-€42'), -42)
expect_equal(uneur('€3,423.42'), 3,423.42)
}
)
